1、汇编里的函数就是一系列指令的集合，用来实现需要重复使用的功能，一般用call配合retn指令实现，一般用堆栈传值，用EAX存储返回值。
例如：
push 0x1
push 0x2
call 0x0010ff40 函数所在地址编号
mov edx, 0x123

0x0010ff40的内容：
add eax, dword ptr ds:[esp+4]
add eax, dword ptr ds:[esp+8]
retn
执行完函数后，retn返回到call指令的下一条指令的地址编号，执行call指令的下一条指令：mov edx，0x123

该函数的功能是实现2个数相加，返回结果存在eax中，注意为什么不是ds:[esp]而是ds:[esp+4]呢？因为call指令会把下一条指令所在的内存编号压入栈中，
所以call指令执行后，esp指向的内存地址编号就在原来的基础上减了4,ds:[esp]的内容是call指令下一条指令的内存编号，而不是1,
我们之前压入栈中的数据0x1存在地址编号为ds:[esp+8]的内存单元中，而0x2则是在ds:[esp+4]中，因为这里并不是pop出栈，我们是直接用内存地址编号
访问堆栈中的数据，所以不存在先进后出的限制，而且这里是加法，ds:[esp+4]和ds:[esp+8]的前后顺序不重要。